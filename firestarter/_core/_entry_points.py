import os
from argparse import ArgumentParser
from pathlib import Path
from platform import system
from shutil import rmtree

from .._fuel import _ignite
from ._labels import _Labels
from .._utils._log import _Logger

def _console() -> int:
    """
    `firestarter`'s main entry point. Not meant for programming use.

    Returns:
        int: The exit code.
    """

    description = """description: a cross-platform CLI to help you jump right into developing
projects with Python."""

    parser = ArgumentParser(prog = "firestarter",
                            description = description,
                            )
    parser.add_argument("-v", "--version",
                        action = "store_true",
                        help = "print the version of firestarter.",
                        required = False,
                        dest = "version"
                        )
    parser.add_argument("-f", "--fuel",
                        nargs = 1,
                        action = "store",
                        help = "use a fuel template to create a project.",
                        required = False,
                        dest = "fuel",
                        metavar = "PATH TO TEMPLATE"
                        )
    parser.add_argument("-l", "--log-level",
                        nargs = 1,
                        action = "store",
                        help = "specify the level of logging in terminal.",
                        required = False,
                        dest = "log_level",
                        metavar = "THE LEVEL OF LOGGING",
                        choices = {"ERROR", "INFO", "ACTION", "ALL", "NONE"}
                        )

    args = parser.parse_args()

    if args.version:
        print("\nfirestarter: v0.0.2\n")
        return 0

    if args.log_level:
        log_level = args.log_level[0].lower()
    else:
        log_level = "all"
    
    logger = _Logger(log_level)

    if args.fuel:
        fuel_template = Path(args.fuel[0])

        return _ignite(fuel_template, logger)

    if system().lower() not in ["darwin", "linux", "windows"]:
        logger._error(f"\n{system()} is not supported. Please use Linux, Windows, or macOS.\n")
        return 1

    name = input(_Labels.INIT + "Name of project: ")

    path = input(_Labels.INIT + "Path to project (blank defaults to current directory): ")
    if path is None or path == "":
        path = "."

    root_dir = Path(path) / name
    if os.path.exists(root_dir):
        logger._error(f"{root_dir} already exists.")
        return 1

    git = ""
    while git.lower() not in ["y", "n", "yes", "no"]:
        git = input(_Labels.INIT + "Do you want to initialize a git repository? (Y/n) ")

    project = ""
    while project not in ["package", "blank", "game"]:
        project = input(_Labels.INIT + "Type of project (package, blank, game): ")

    test_framework = ""
    while test_framework.lower() not in ["pytest", "unittest", "none"]:
        test_framework = input(_Labels.INIT + "Testing framework (pytest, unittest, none): ")

    linter = ""
    while linter.lower() not in ["pylint", "flake8", "black", "bandit", "none", "ruff"]:
        linter = input(_Labels.INIT + "Linter (pylint, flake8, black, bandit, none, ruff): ")

    temp_dir = Path("~").expanduser() / ".firestarter/"
    if not os.path.exists(temp_dir):
        os.mkdir(temp_dir)

    template_file = temp_dir / ".temp.fuel"
    if os.path.exists(template_file):
        mode = "w"
    else:
        mode = "x"

    with open(template_file, mode, encoding = "utf-8") as file:
        file.write(f"""[name] :: {name}
[path] :: {path}
[git] :: {git}
[project-type] :: {project}
[test-framework] :: {test_framework}
[linter] :: {linter}
"""
                  )
        file.close()

    return_code = _ignite(template_file, logger)
    
    if return_code == 1:
        return return_code

    with open(root_dir / "template.fuel", "x", encoding = "utf-8") as file:
        file.write(f"""$
$ File generated by firestarter.
$
[name] :: {name}
[path] :: {path}
[git] :: {git}
[project-type] :: {project}
[test-framework] :: {test_framework}
[linter] :: {linter}
"""
                  )

        file.close()

    rmtree(temp_dir)

    return return_code
